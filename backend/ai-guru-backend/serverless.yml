service: ai-guru-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  # lambdaHashingVersion: '20201221'

custom:
  authorizers:
      cognito:
          name: CognitoAuthorizer
          type: COGNITO_USER_POOLS
          arn: !GetAtt CognitoUserPool.Arn
          identityValidationExpression: .*

resources:
  Resources:
    CognitoUserPool: 
      Type: AWS::Cognito::UserPool
      Properties: 
        UserPoolName: !Sub 'ai-guru-pool-${sls:stage}'
        MfaConfiguration: OFF
        AutoVerifiedAttributes: 
          - email
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        EmailVerificationMessage: "The verification code to your new account is {####}"
        EmailVerificationSubject: "Verify your new account"
        VerificationMessageTemplate:
          DefaultEmailOption: "CONFIRM_WITH_CODE"
          EmailMessage: "The verification code to your new account is {####}"
          EmailSubject: "Verify your new account"
          #"SmsMessage": "The verification code to your new account is {####}"
    
    CognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Sub 'ai-guru-${sls:stage}'
        UserPoolId: !Ref CognitoUserPool        
    
    CognitoWebClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub 'ai-guru-webclient-${sls:stage}'
        UserPoolId: !Ref CognitoUserPool
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - "email"
          - "openid"
          - "profile"
        CallbackURLs:
          - https://example.com
        SupportedIdentityProviders:
          - "COGNITO"
    # RestApi:
    #   Type: AWS::ApiGateWay::RestApi
    #   Properties:
    #     Name: !Sub 'ai-guru-api-${sls:stage}'
    #     Authorizers:


functions:
  chatbot:
    handler: handler.chatbot
    environment:
      REGION: us-east-1
      # TODO: read secrets from secrets manager or param store.
      ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
      botAliasId: IVHQZKP46J
      botId: L2ZJJFS9AT

    events:
      - http:
          path: /
          method: post
          cors:
            # TODO: limit CORS origin and headers
            origin: '*'
            headers: '*'
          authorizer: ${self:custom.authorizers.cognito}
